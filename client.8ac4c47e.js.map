{"version":3,"file":"client.8ac4c47e.js","sources":["webpack:///lib/utils/recast.js","webpack:///lib/h.js","webpack:///lib/index.js","webpack:///lib/utils/formatter.js","webpack:///lib/transform/toBuilder.js","webpack:///docs-src/index.js","webpack:///docs-src/style.js","webpack:///docs-src/components/index.js","webpack:///docs-src/components/style.js","webpack:///lib/transform/index.js","webpack:///fs (ignored)","webpack:///lib/transform/toSimple.js","webpack:///lib/utils/print.js","webpack:///lib/components/simple.js","webpack:///lib/components/hoc.js","webpack:///docs-src/components/common/Editor/index.js","webpack:///docs-src/components/common/Editor/style.js","webpack:///docs-src/components/common/Editor/plugins/index.js","webpack:///docs-src/components/common/Editor/plugins/IMEFix.js","webpack:///docs-src/components/common/Editor/plugins/Code.js","webpack:///docs-src/components/common/Editor/createInitialState.js","webpack:///docs-src/utils/babel.js","webpack:///docs-src/utils/style.js"],"sourcesContent":["import _ from 'lodash'\n\nimport * as types from 'ast-types'\n\nconst {namedTypes: n, builders: b, Type} = types\nconst def = Type.def\n\n// FROM https://github.com/benjamn/ast-types/blob/master/lib/types.js#L612\nexport const getBuilderName = (typeName) => {\n  return typeName.replace(/^[A-Z]+/, function (upperCasePrefix) {\n    let len = upperCasePrefix.length\n    switch (len) {\n      case 0:\n        return ''\n      // If there's only one initial capital letter, just lower-case it.\n      case 1:\n        return upperCasePrefix.toLowerCase()\n      default:\n        // If there's more than one initial capital letter, lower-case\n        // all but the last one, so that XMLDefaultDeclaration (for\n        // example) becomes xmlDefaultDeclaration.\n        return upperCasePrefix.slice(\n          0, len - 1).toLowerCase() +\n          upperCasePrefix.charAt(len - 1)\n    }\n  })\n}\n\n// builderName -> nodeType\nexport const getTypeName = (builderName) => {\n  return builderName.replace(/^[a-z]+/, function (lowerCasePrefix) {\n    if (lowerCasePrefix === 'jsx') return 'JSX' // Fix for irregular builderName\n    let len = lowerCasePrefix.length\n    switch (len) {\n      case builderName.length:\n        return _.upperFirst(builderName)\n      case 1:\n      default:\n        return _.upperFirst(lowerCasePrefix)\n    }\n  })\n}\n\n// get buildParams from builderName\nexport const getBuildParams = (builderName) => {\n  return _.clone(def(getTypeName(builderName)).buildParams)\n}\n\n// get buildParams from builderName\nexport const getAllFields = (builderName) => {\n  return _.clone(def(getTypeName(builderName)).allFields)\n}\n\n// get superTypeList from builderName\nexport const getSuperTypeList = (builderName) => {\n  return _.clone(def(getTypeName(builderName)).supertypeList)\n}\n\n\n\n// WEBPACK FOOTER //\n// lib/utils/recast.js","import _ from 'lodash'\nimport icepick from 'icepick'\n\nimport { getBuildParams, getTypeName, getAllFields } from 'lib/utils/recast'\n\nimport * as types from 'ast-types'\n\nconst {builders: b} = types\n\nconst isArrayParam = (param) => /\\[.*\\]/.test(param)\nconst isOnlyBooleanParam = (param) => _.trim(param) === 'boolean'\n\nconst h = function (tagName, props, ..._children) {\n  // initialize props with empty object if not defined.\n  if (!props) props = {}\n\n  let children = (() => {\n    // prefer props.children if defined\n    if (props.children) return props.children\n    // allow array style children.\n    if (_.isArray(_.first(_children)) && _children.length === 1) return _.first(_children)\n    // otherwise use default jsx children.\n    return _children\n  })()\n\n  let renderFn = tagName\n  if (_.isString(tagName)) {\n    renderFn = b[tagName]\n\n    const params = getBuildParams(tagName)\n    const fields = getAllFields(tagName)\n\n    let args = []\n    let fromLast = false\n    const frozenParams = icepick.freeze([...params]) // keep original params for get index.\n\n    while (params.length) {\n      let p = fromLast ? params.pop() : params.shift()\n      const i = _.indexOf(frozenParams, p)\n\n      if (p === undefined) continue\n\n      const name = fields[p].toString()\n      const typeDef = name.split(':')\n\n      // return prop if found by param\n      if (props[p] !== undefined) {\n        args[i] = props[p]\n        continue\n      }\n\n      const hasChildren = children.length >= 1\n      const hasNext = params.length > 0\n\n      if (isOnlyBooleanParam(typeDef[1])) {\n        // set false if type is boolean and no value found in props.\n        args[i] = false\n        continue\n      } else if (isArrayParam(typeDef[1])) {\n        if (hasNext) {\n          // put param to params again and reverse search order.\n          params.unshift(p)\n          fromLast = true\n          continue\n        }\n\n        if (hasChildren) {\n          args[i] = children\n          continue\n        }\n\n        // return empty array if params allows array and value not found\n        args[i] = []\n        continue\n      } else if (hasChildren) {\n        args[i] = fromLast ? children.pop() : children.shift()\n        continue\n      }\n\n      // throw error if no suitable value found.\n      throw new Error(`Cannot find value for ${getTypeName(tagName)} ${name}`)\n    }\n\n    let builder = renderFn.apply(this, [...args])\n    builder = {...builder, ...props} // merge extra props\n\n    if (props.es) {\n      builder = b.expressionStatement(builder)\n    }\n\n    return builder\n  } else {\n    return renderFn({...props, children})\n  }\n}\n\nexport default h\n\n\n\n// WEBPACK FOOTER //\n// lib/h.js","import toBuilder from 'lib/transform'\nimport format from 'lib/utils/formatter'\nimport print from 'lib/utils/print'\nimport h from 'lib/h'\nimport * as simple from 'lib/components/simple'\n\n// named export\nexport {\n  toBuilder,\n  format,\n  print,\n  simple,\n  h\n}\n\n// default export\nexport default {\n  toBuilder,\n  format,\n  print,\n  simple,\n  h\n}\n\n\n\n// WEBPACK FOOTER //\n// lib/index.js","import * as babylon from 'babylon'\nimport prettier from 'prettier'\n\nexport const babylonOpts = {\n  sourceType: 'module',\n  strictMode: false,\n  tokens: false,\n  plugins: [\n    'jsx',\n    'flow',\n    'estree',\n    'objectRestSpread',\n    'classProperties',\n    'dynamicImport',\n    'optionalChaining',\n    'throwExpressions'\n  ]\n}\n\nexport default (code) => {\n  const RULE = {\n    tabWidth: 2,\n    semi: false,\n    printWidth: 80,\n    singleQuote: true,\n    bracketSpacing: true,\n    originalText: code\n  }\n\n  return prettier.format(code, {\n    ...RULE,\n    parser (text) {\n      return babylon.parse(text, babylonOpts)\n    }\n  })\n}\n\n\n\n// WEBPACK FOOTER //\n// lib/utils/formatter.js","import _ from 'lodash'\nimport icepick from 'icepick'\n\nimport * as types from 'ast-types'\n\nconst {namedTypes: n, builders: b, getFieldNames, getFieldValue} = types\n\nimport { getBuilderName, getBuildParams } from 'lib/utils/recast'\n\nexport const parse = (path) => {\n  const node = path.value\n  const NODE_TYPE = getBuilderName(node.type)\n\n  const fieldNames = _.without(getFieldNames(node), 'type')\n  let params = getBuildParams(NODE_TYPE)\n  let props = {}\n  let children = []\n\n  _.each(fieldNames, (param) => {\n    const value = getFieldValue(node, param)\n    const isEmptyArray = _.isArray(value) && _.isEmpty(value)\n    // return if value is falsy or empty array.\n    if (!value || isEmptyArray) return\n    params = _.uniq([...params, param])\n  })\n\n  _.each(params, (param) => {\n    let value = getFieldValue(node, param)\n    const isBool = _.isBoolean(value)\n    const isString = _.isString(value)\n\n    // following params will treat as props.\n    // - String\n    // - Boolean(true/false)\n    // - null\n    if (isString || isBool || value === null) {\n      props[param] = value\n      return\n    }\n\n    // will treat as children otherwise.\n    if (_.isArray(value)) {\n      value = _.map(value, (value) => _.get(value, 'jsx', value))\n    } else {\n      value = _.get(value, 'jsx', value)\n    }\n\n    children = icepick.push(children, value)\n  })\n\n  // construct props\n  const propsString = ' ' + _.map(props, (value, key) => {\n    if (value === false) {\n      // should not omit props if key is required(included in params).\n      if (_.includes(params, key)) return `${key}={false}`\n      return ''\n    }\n    if (value === true) {\n      // should not omit props if key is required(included in params).\n      if (_.includes(params, key)) return `${key}={true}`\n      return `${key}`\n    }\n    if (value === null) return `${key}={null}`\n    return `${key}=\"${value}\"`\n  }).join(' ')\n\n  // construct children\n  children = _.flatten(children.map((value) => {\n    if (_.isPlainObject(value)) return `{${value}}`\n    if (_.isString(value) || _.isObject(value)) return value\n    return `{${value}}`\n  })).join('\\n')\n\n  return {\n    tagName: NODE_TYPE,\n    props,\n    propsString,\n    children\n  }\n}\n\nexport default (option = {}) => (path) => {\n  const {\n    shouldOmitProgram = false // specify should/not wrap result by `b.program`\n  } = option\n\n  const node = path.value\n  const {propsString, children, tagName} = parse(path)\n\n  if (_.isEmpty(children)) {\n    return path.replace({...node, jsx: `<${tagName}${propsString} />`})\n  }\n\n  if (tagName === 'program') {\n    if (shouldOmitProgram) return path.replace(`${children}`)\n    return path.replace(`<${tagName}${propsString}>${children}</${tagName}>`)\n  }\n\n  path.replace({...node, jsx: `<${tagName}${propsString}>${children}</${tagName}>`})\n}\n\n\n\n// WEBPACK FOOTER //\n// lib/transform/toBuilder.js","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport _ from 'lodash'\nwindow._ = _\n\nimport './style'\nimport { wrap } from './utils/style'\n\nimport Content from './components'\n\nlet App = () => {\n  return (\n    <div>\n      <h1>test build</h1>\n      <Content />\n    </div>\n  )\n}\n\n// styleを注入する。\nApp = wrap(App)\n\nlet render = () => {\n  const appNode = document.getElementById('app')\n  ReactDOM.render(<App />, appNode)\n}\n\n// Native\n// Check if the DOMContentLoaded has already been completed\nif (document.readyState === 'complete' || document.readyState !== 'loading') {\n  render()\n} else {\n  document.addEventListener('DOMContentLoaded', render)\n}\n\n\n\n// WEBPACK FOOTER //\n// docs-src/index.js","import {\n  registerRules\n} from './utils/style'\n\nconst app = {\n  position: 'relative',\n  zIndex: 0\n}\n\nconst body = {\n  margin: 0,\n  padding: 0,\n  backgroundColor: '#FFFFFF',\n  color: '#333333',\n  fontFamily: '\"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace'\n}\n\nregisterRules({\n  body,\n  '#app': app\n})\n\n\n\n// WEBPACK FOOTER //\n// docs-src/style.js","import React from 'react'\nimport _ from 'lodash'\n\nimport {\n  compose,\n  withState,\n  withPropsOnChange,\n  withHandlers\n} from 'recompose'\n\nimport classes from './style.js'\n\nimport { shorthand, toBuilder, print, format } from 'js-to-builder'\n\nimport Editor from 'docs-src/components/common/Editor'\nimport { babelAndEval } from 'docs-src/utils/babel'\n\nconst enhance = compose(\n  withState('code', 'setCode', ''),\n  withState('isSimple', 'setIsSimple', false),\n  withState('codeTemplate', 'setCodeTemplate', `const hoge = 'fuga'`),\n  withState('builderError', 'setBuilderError', null),\n  withPropsOnChange(\n    ['code', 'setCode', 'isSimple', 'setCodeTemplate'],\n    ({code, setCode, isSimple, setCodeTemplate}) => {\n      let jsx = null\n      let error = null\n\n      if (_.isEmpty(code)) return\n\n      // because toBuilder will throw syntax error while editing :)\n      try {\n        jsx = toBuilder(code, {simple: isSimple}).code\n      } catch (e) {\n        error = e.toString()\n      }\n\n      return {\n        jsx,\n        codeError: error,\n        setCode: _.debounce(setCode, 1000 / 60), // debounce setCode call\n        setCodeTemplate: _.debounce(setCodeTemplate, 1000 / 60) // debounce setCodeTemplate call\n      }\n    }\n  ),\n  withHandlers({\n    handleToggleSimpleChange: ({setIsSimple}) => (e) => {\n      setIsSimple(e.target.checked)\n    },\n    handleBuilderChange: ({setCodeTemplate, setBuilderError}) => (value) => {\n      if (_.isEmpty(value)) return\n      const jsxCode = `/** @jsx h */ ${value}`\n      try {\n        const code = format(babelAndEval(jsxCode))\n        setBuilderError(null)\n        setCodeTemplate(format(`\n          ${code}\n        `))\n      } catch (e) {\n        setBuilderError(e)\n      }\n    }\n  })\n)\n\nexport default enhance((props) => {\n  const {\n    setCode,\n    jsx,\n    codeError,\n    builderError,\n    codeTemplate,\n    handleToggleSimpleChange,\n    handleBuilderChange,\n    isSimple\n  } = props\n\n  return (\n    <div>\n      <div className={classes.Content}>\n        <h3>js-to-builder</h3>\n\n        <a href='https://github.com/subuta/js-to-builder' target='_blank'>https://github.com/subuta/js-to-builder</a>\n\n        <div className={classes.ToggleSimple}>\n          <b>EXPERIMENTAL:</b>\n\n          <div className={classes.ToggleSimpleInput}>\n            <label htmlFor='is-simple'>simple?</label>\n            <input\n              id='is-simple'\n              type='checkbox'\n              defaultChecked={isSimple}\n              onChange={handleToggleSimpleChange}\n            />\n          </div>\n        </div>\n\n        <div className={classes.Editors}>\n          <Editor\n            onChange={(value) => {\n              setCode(value)\n            }}\n            template={codeTemplate}\n            error={codeError}\n          />\n\n          <Editor\n            onChange={handleBuilderChange}\n            template={jsx || ''}\n            error={builderError}\n          />\n        </div>\n      </div>\n\n      <div className={classes.Footer}>\n        <a href='https://github.com/subuta' target='_blank'>by @subuta</a>\n      </div>\n    </div>\n  )\n})\n\n\n\n// WEBPACK FOOTER //\n// docs-src/components/index.js","import {\n  registerStyles\n} from 'docs-src/utils/style'\n\nconst Content = {\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100vh',\n  padding: 16,\n  fontFamily: '\"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace',\n  fontSize: 13,\n  color: '#24292e',\n\n  '& > h3': {\n    marginTop: 0\n  }\n}\n\nconst ToggleSimple = {\n  margin: '16px 0 0'\n}\n\nconst ToggleSimpleInput = {\n  margin: '4px 0 0',\n  cursor: 'pointer',\n\n  '& > label': {\n    margin: '0 4px 0 0',\n    userSelect: 'none'\n  }\n}\n\nconst Editors = {\n  margin: '16px 0 0',\n  display: 'flex',\n  alignItems: 'flex-start',\n  flex: '1 1 100%',\n  '& > *': {\n    margin: '0 16px 0 0',\n    '&:nth-of-type(2)': {\n      margin: 0\n    }\n  }\n}\n\nconst Footer = {\n  margin: '0 0 16px',\n  padding: '0 16px',\n  display: 'flex',\n  justifyContent: 'flex-end',\n\n  '& > a': {\n    marginTop: 0\n  }\n}\n\nexport default registerStyles({\n  Content,\n  ToggleSimple,\n  ToggleSimpleInput,\n  Editors,\n  Footer\n})\n\n\n\n// WEBPACK FOOTER //\n// docs-src/components/style.js","import format, { babylonOpts } from 'lib/utils/formatter'\nimport _ from 'lodash'\n\nimport recast from 'recast'\nimport * as types from 'ast-types'\nimport * as babylon from 'babylon'\n\nconst {namedTypes: n, builders: b} = types\n\nimport toSimple from './toSimple'\nimport toBuilder from './toBuilder'\n\nexport default (code, option = {}) => {\n  const {\n    simple = false\n  } = option\n\n  const recastOpts = {\n    parser: {\n      parse (source) {\n        return babylon.parse(source, babylonOpts)\n      }\n    }\n  }\n\n  let transform = simple ? toSimple(option) : toBuilder(option)\n  const ast = recast.parse(code, recastOpts)\n\n  // modify ast.\n  types.visit(ast, {\n    visitComment (path) {\n      this.traverse(path)\n      transform(path)\n    },\n\n    visitNode (path) {\n      this.traverse(path)\n      transform(path)\n    }\n  })\n\n  const jsxCode = recast.print(ast).code\n\n  const result = `const render = () => (\n    ${jsxCode}\n  )`\n\n  return {\n    code: format(result)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// lib/transform/index.js","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// fs (ignored)\n// module id = 557\n// module chunks = 1","import _ from 'lodash'\nimport icepick from 'icepick'\n\nimport * as types from 'ast-types'\n\nconst {namedTypes: n, builders: b, getFieldNames, getFieldValue} = types\n\nimport { getBuilderName, getBuildParams } from 'lib/utils/recast'\nimport os from 'os'\n\nimport toBuilder, { parse } from './toBuilder'\n\nexport default (option = {}) => {\n  const builderTransform = toBuilder(option)\n\n  const {\n    shouldOmitProgram = false, // specify should/not wrap result by `b.program`\n    shouldAddFieldNames = false // should print fieldNames also(defaults to `buildParams` only)\n  } = option\n\n  return (path) => {\n    const {node} = path\n    const replace = (jsx) => path.replace({...node, jsx})\n    const {tagName, props, children} = parse(path)\n\n    if (!node) return\n\n    const NODE_TYPE = tagName\n\n    if (NODE_TYPE === 'program') {\n      if (shouldOmitProgram) return path.replace(`${children}`)\n      return path.replace(`<program>${children}</program>`)\n    }\n\n    // run toBuilder first to get jsx.\n    builderTransform(path)\n\n    // Expression\n    if (NODE_TYPE === 'callExpression') {\n      const args = _.map(node.arguments, (argument) => argument.jsx).join('\\n')\n      const withES = n.ExpressionStatement.check(path.parentPath.node)\n      const calleeNode = node.callee\n\n      let callee = getFieldValue(node.callee, 'name')\n      // if nested FnCall\n      if (n.MemberExpression.check(calleeNode) && n.CallExpression.check(calleeNode.object)) {\n        return replace(`\n          <FnCall callee=\"${node.callee.property.name}\" ${withES ? 'es' : ''}>\n            ${node.callee.jsx}\n            ${args}\n          </FnCall>\n        `)\n      } else if (n.MemberExpression.check(calleeNode)) {\n        callee = getFieldValue(calleeNode, 'jsx')\n      }\n\n      if (!callee) {\n        return replace(`<FnCall ${withES ? 'es' : ''}>${node.callee.jsx}${args}</FnCall>`)\n      }\n\n      return replace(`<FnCall ${callee ? `callee=\"${callee}\"` : ''} ${withES ? 'es' : ''}>${args}</FnCall>`)\n    } else if (NODE_TYPE === 'memberExpression') {\n      // if nested FnCall\n      const objectNode = node.object\n      const propertyNode = node.property\n      if (n.CallExpression.check(objectNode)) {\n        return replace(`${objectNode.jsx}`)\n      } else if (n.Identifier.check(objectNode)) {\n        return replace(`${objectNode.name}.${propertyNode.name}`)\n      } else if (n.ThisExpression.check(objectNode)) {\n        return replace(`${objectNode.jsx}.${propertyNode.name}`)\n      }\n      return replace(`${objectNode.jsx}.${propertyNode.jsx}`)\n    } else if (NODE_TYPE === 'arrowFunctionExpression') {\n      const params = _.map(node.params, (param) => param.jsx).join('\\n')\n      return replace(`<ArrowFn ${node.async ? 'async' : ''} ${node.generator ? 'generator' : ''}>${params}${node.body.jsx}</ArrowFn>`)\n    } else if (NODE_TYPE === 'objectExpression') {\n      let properties = _.transform(node.properties, (result, property) => {\n        let value = ''\n        if (n.Identifier.check(property.value)) {\n          value = property.value.name\n        } else if (n.Literal.check(property.value)) {\n          value = `'${property.value.value}'`\n        }\n        result.push([property.key.name, value])\n      }, [])\n      properties = `{${_.map(properties, (property) => property.join(':'))}}`\n\n      const withES = n.ExpressionStatement.check(node.parent)\n\n      // if JSX\n      if (n.JSXExpressionContainer.check(path.parentPath.node)) {\n        return replace(`${properties}`)\n      }\n\n      return replace(`\n        <Value ${withES ? 'es' : ''}>{${properties}}</Value>\n      `)\n    } else if (NODE_TYPE === 'arrayExpression') {\n      const elements = _.trim(_.map(node.elements, (element) => element.value).join(','))\n      const withES = n.ExpressionStatement.check(path.parentPath.node)\n      return replace(`<Value ${withES ? 'es' : ''}>{[${_.isEmpty(node.elements) ? '' : elements}]}</Value>`)\n    } else if (NODE_TYPE === 'BinaryExpression') {\n      return path.replace(`\n      <binaryExpression operator=\"${node.operator}\">\n        ${node.left.jsx}${node.right.jsx}\n      </binaryExpression>\n    `)\n    } else if (NODE_TYPE === 'assignmentExpression') {\n      return replace(`\n      <assignmentExpression operator=\"${node.operator}\">\n        ${node.left.jsx}\n        ${node.right.jsx}\n      </assignmentExpression>\n    `)\n    } else if (NODE_TYPE === 'UpdateExpression') {\n      return path.replace(`\n      <updateExpression operator=\"${node.operator}\" prefix={${node.prefix}}>\n        ${node.argument.jsx}\n      </updateExpression>\n    `)\n    } else if (NODE_TYPE === 'functionExpression') {\n      const params = _.map(node.params, (param) => param.jsx).join('\\n')\n      return replace(`<Fn ${node.id ? `id=\"${node.id.name}\"` : ''} ${node.async ? 'async' : ''} ${node.generator ? 'generator' : ''}>${params}${node.body.jsx}</Fn>`)\n    } else if (NODE_TYPE === 'thisExpression') {\n      return replace('this')\n    }\n\n    // Statement\n    if (NODE_TYPE === 'expressionStatement') {\n      return replace(`${children}`)\n    } else if (NODE_TYPE === 'BlockStatement') {\n      return\n    } else if (NODE_TYPE === 'ReturnStatement') {\n      return path.replace(`\n      <returnStatement>${node.argument.jsx}</returnStatement>\n    `)\n    } else if (NODE_TYPE === 'DebuggerStatement') {\n      return path.replace(`\n      <debuggerStatement />\n    `)\n    } else if (NODE_TYPE === 'IfStatement') {\n      return path.replace(`\n      <ifStatement>\n        ${node.test.jsx}${node.consequent.jsx}${node.alternate ? node.alternate.jsx : ''}\n      </ifStatement>\n    `)\n    } else if (NODE_TYPE === 'BreakStatement') {\n      return path.replace(`\n      <breakStatement>\n        ${node.label ? node.label.jsx : ''}\n      </breakStatement>\n    `)\n    } else if (NODE_TYPE === 'ContinueStatement') {\n      return path.replace(`\n      <continueStatement>\n        ${node.label ? node.label.jsx : ''}\n      </continueStatement>\n    `)\n    } else if (NODE_TYPE === 'ForStatement') {\n      return path.replace(`\n      <forStatement>\n        ${node.init.jsx}${node.test.jsx}${path.replace.jsx}${node.body.jsx}\n      </forStatement>\n    `)\n    } else if (NODE_TYPE === 'ForInStatement') {\n      return replace(`<forInStatement>${node.left.jsx}${node.right.jsx}${node.body.jsx}</forInStatement>\n    `)\n    } else if (NODE_TYPE === 'ForOfStatement') {\n      return path.replace(`\n      <forOfStatement>\n        ${node.left.jsx}${node.right.jsx}${node.body.jsx}\n      </forOfStatement>\n    `)\n    } else if (NODE_TYPE === 'DoWhileStatement') {\n      return path.replace(`\n      <doWhileStatement>\n        ${node.body.jsx}${node.test.jsx}\n      </doWhileStatement>\n    `)\n    } else if (NODE_TYPE === 'WhileStatement') {\n      return path.replace(`\n      <whileStatement>\n        ${node.test.jsx}${node.body.jsx}\n      </whileStatement>\n    `)\n    } else if (NODE_TYPE === 'LabeledStatement') {\n      return path.replace(`\n      <labeledStatement>\n        ${node.label.jsx}${node.body.jsx}\n      </labeledStatement>\n    `)\n    }\n\n    // Primitive\n    if (NODE_TYPE === 'literal') {\n      let value = `{${node.value}}`\n      if (_.isString(node.value)) {\n        value = node.value\n      }\n      if (node.value === '') {\n        return replace(`<Value value={\"\"}/>`)\n      }\n      return replace(`<Value>${value}</Value>`)\n    } else if (NODE_TYPE === 'identifier') {\n      const withES = n.ExpressionStatement.check(path.parentPath.node)\n      return replace(`<identifier ${withES ? 'es' : ''}>${node.name}</identifier>`)\n    }\n\n    // Other\n    if (NODE_TYPE === 'Property') {\n      // TODO: なぜかnode.key.jsxとnode.value.jsxの結果が同じになるのの調査\n      let key = node.key.jsx\n      if (node.key.type === 'Identifier') {\n        key = `<identifier>${node.key.name}</identifier>`\n      }\n      return path.replace(`\n      <property ${node.kind ? `kind=\"${node.kind}\"` : ''}\n                ${node.method ? 'method' : ''}\n                ${node.shorthand ? 'shorthand' : ''}\n                ${node.computed ? 'computed' : ''}\n      >\n        ${key}${node.value.jsx}\n      </property>\n    `)\n    }\n\n    // Pattern\n    if (NODE_TYPE === 'assignmentPattern') {\n      return replace(`<assignmentPattern>${node.left.jsx}${node.right.jsx}</assignmentPattern>`)\n    } else if (NODE_TYPE === 'objectPattern') {\n      const properties = _.map(node.properties, (property) => property.jsx).join('\\n')\n      return replace(`<objectPattern>${properties}</objectPattern>`)\n    }\n\n    // ES6 import\n    if (NODE_TYPE === 'importDeclaration') {\n      const specifier = _.first(node.specifiers)\n      if (node.specifiers.length > 1 || n.ImportSpecifier.check(specifier)) {\n        const specifiers = _.map(node.specifiers, (specifier) => specifier.jsx).join('\\n')\n        return replace(`<Import source=\"${node.source.value}\">${specifiers}</Import>`)\n      } else {\n        const specifier = _.first(node.specifiers)\n        const isDefault = n.ImportDefaultSpecifier.check(specifier)\n        return replace(`<Import name=\"${specifier.jsx}\" source=\"${node.source.value}\" ${isDefault ? 'default' : ''}/>`)\n      }\n    } else if (NODE_TYPE === 'importDefaultSpecifier') {\n      return replace(`${node.local.name}`)\n    } else if (NODE_TYPE === 'importNamespaceSpecifier') {\n      return replace(`${node.local.name}`)\n    } else if (NODE_TYPE === 'importSpecifier') {\n      // Fix circular.\n      return replace(`<importSpecifier>${node.imported.jsx}${node.local.jsx}</importSpecifier>`)\n    }\n\n    // ES6 export\n    if (NODE_TYPE === 'exportDefaultDeclaration') {\n      return replace(`<Export default>${node.declaration.jsx}</Export>`)\n    } else if (NODE_TYPE === 'exportNamedDeclaration') {\n      return replace(`<Export>${node.declaration.jsx}</Export>`)\n    }\n\n    // Variable\n    if (NODE_TYPE === 'variableDeclarator') {\n      const declarations = path.parentPath.value\n\n      // apply update if id.type === ObjectPattern\n      if (n.ObjectPattern.check(node.id)) {\n        return replace(`<Declarator>${node.id.jsx}${node.init ? node.init.jsx : ''}</Declarator>`)\n      }\n\n      // skip update if parent not use declarator.\n      if (declarations.length <= 1) return\n\n      return replace(`<Declarator name=\"${node.id.name}\">${node.init ? node.init.jsx : ''}</Declarator>`)\n    } else if (NODE_TYPE === 'variableDeclaration') {\n      // defaults\n      let name = null\n      let declarations = _.map(node.declarations, (declaration) => declaration.jsx).join('\\n')\n\n      // if single variable declaration\n      if (node.declarations.length === 1 && n.VariableDeclarator.check(_.first(node.declarations))) {\n        const declarator = _.first(node.declarations)\n        declarations = declarator.init ? [\n          `${declarator.init.jsx}`\n        ] : []\n        // set name only if id.type = 'Identifier'\n        if (n.Identifier.check(declarator.id)) {\n          name = declarator.id.name\n        } else if (n.ObjectPattern.check(declarator.id)) {\n          declarations = [\n            `${declarator.jsx}`\n          ]\n        } else if (n.ArrayPattern.check(declarator.id)) {\n          declarations = [\n            `${declarator.jsx}`\n          ]\n        }\n      }\n\n      if (_.toLower(node.kind) === 'const') {\n        return replace(`<Const ${name ? `name=\"${name}\"` : ''}>${declarations}</Const>`)\n      } else if (_.toLower(node.kind) === 'let') {\n        return replace(`<Let ${name ? `name=\"${name}\"` : ''}>${declarations}</Let>`)\n      } else if (_.toLower(node.kind) === 'var') {\n        return replace(`<Var ${name ? `name=\"${name}\"` : ''}>${declarations}</Var>`)\n      }\n    }\n\n    // jsx\n    if (NODE_TYPE === 'jsxIdentifier') {\n      return replace(`${node.name}`)\n    } else if (NODE_TYPE === 'JSXOpeningElement') {\n      return\n    } else if (NODE_TYPE === 'JSXClosingElement') {\n      return\n    } else if (NODE_TYPE === 'jsxText') {\n      return replace(`${node.value}`)\n    } else if (NODE_TYPE === 'jsxElement') {\n      const {openingElement} = node\n      const children = _.map(node.children, (child) => child.jsx).join('\\n')\n      const attributes = _.map(openingElement.attributes, (child) => child.jsx).join('\\n')\n      const tagName = openingElement.name.jsx\n      return replace(`\n        <JSX\n          tagName=\"${tagName}\"\n          ${attributes}\n        >\n          ${children}\n        </JSX>\n      `)\n    } else if (NODE_TYPE === 'jsxAttribute') {\n      if (!node.name) return replace('')\n\n      let value = node.value ? `{${node.value.jsx}}` : ''\n      if (n.Literal.check(node.value)) {\n        value = `\"${node.value.value}\"`\n      }\n\n      return replace(`${node.name.jsx}${value ? `=${value}` : ''}`)\n    } else if (NODE_TYPE === 'jsxExpressionContainer') {\n      return replace(node.expression.jsx)\n    }\n\n    // ES6\n    if (NODE_TYPE === 'yieldExpression') {\n      return\n    }\n\n    if (NODE_TYPE === 'classDeclaration') {\n      return replace(`<ClassDef id=\"${node.id ? node.id.name : 'null'}\">${node.superClass ? node.superClass.jsx : ''}${node.body.jsx}</ClassDef>`)\n    } else if (NODE_TYPE === 'ClassExpression') {\n      const args = _.map(node.arguments, (argument) => argument.jsx).join('\\n')\n      return path.replace(`<classExpression>${args}</classExpression>`)\n    } else if (NODE_TYPE === 'classBody') {\n      const body = _.map(node.body, (row) => row.jsx).join('\\n')\n      return replace(`${body}`)\n    } else if (NODE_TYPE === 'methodDefinition') {\n      if (n.Expression.check(node.key)) {\n        return replace(`<Method kind=\"${node.kind}\" ${node.static ? 'static' : ''}>${node.key.jsx}${node.value.jsx}</Method>`)\n      }\n      return replace(`<Method kind=\"${node.kind}\" key={${node.key.jsx}} ${node.static ? 'static' : ''}>${node.value.jsx}</Method>`)\n    }\n\n    // ES7\n    if (NODE_TYPE === 'AwaitExpression') {\n      return path.replace(`<awaitExpression>${node.argument.jsx}</awaitExpression>`)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// lib/transform/toSimple.js","import { print, parse } from 'recast'\nimport * as types from 'ast-types'\nconst {namedTypes: n, builders: b, visit, getFieldNames, getFieldValue} = types\n\nconst builderToCode = (builders) => print(builders).code\n\nexport default builderToCode\n\n\n\n// WEBPACK FOOTER //\n// lib/utils/print.js","/** @jsx h */\n\nimport _ from 'lodash'\n\nimport {\n  withES\n} from 'lib/components/hoc'\n\nimport h from 'lib/h'\nimport * as types from 'ast-types'\n\nconst {namedTypes: n, builders: b} = types\n\nexport const Value = withES((props) => {\n  // try to parse as object first.\n  const {children} = props\n  const value = _.get(props, 'value', _.first(children))\n  if (_.isPlainObject(value)) {\n    return (\n      <objectExpression>\n        {_.map(value, (v, k) => (\n          <property kind='init' method={false} shorthand={false} computed={false}>\n            <identifier>{k}</identifier>\n            <literal>{v}</literal>\n          </property>\n        ))}\n      </objectExpression>\n    )\n  }\n\n  // if value not defined and has empty children.\n  if (value === undefined && _.isArray(children) && children.length === 0) return <arrayExpression />\n\n  if (_.isArray(children) && children.length > 1) {\n    return (\n      <arrayExpression>\n        {_.map(children, (value) => (\n          <literal>{value}</literal>\n        ))}\n      </arrayExpression>\n    )\n  }\n\n  return (\n    <literal>{value}</literal>\n  )\n})\n\nexport const Declarator = (props) => {\n  const {children} = props\n\n  let value = props.value\n  if (props.value) {\n    value = (\n      <Value>{props.value}</Value>\n    )\n  } else {\n    value = _.last(children)\n  }\n\n  let name = _.first(children)\n  if (props.name) {\n    name = <identifier>{props.name}</identifier>\n  }\n\n  return (\n    <variableDeclarator>\n      {name}\n      {value || null}\n    </variableDeclarator>\n  )\n}\n\nconst VariableDeclarationCreator = (kind) => (props) => {\n  const children = (() => {\n    // props.value or if not wrapped with VariableDeclarator.\n    if (props.value || !n.VariableDeclarator.check(_.first(props.children))) {\n      return (\n        <Declarator {...props} />\n      )\n    }\n    return props.children\n  })()\n\n  return (\n    <variableDeclaration kind={kind}>\n      {children}\n    </variableDeclaration>\n  )\n}\n\n// function call\nexport const FnCall = withES((props) => {\n  let children = props.children\n\n  // if callee omitted.\n  if (!props.callee) return <callExpression>{children}</callExpression>\n\n  let callee = <identifier>{props.callee}</identifier>\n  if (n.CallExpression.check(_.first(children))) {\n    // Check for nested FnCall\n    // shift first child and pass CallExpression as MemberExpression's object.\n    callee = (\n      <memberExpression>\n        {children.shift()}\n        {<identifier>{props.callee}</identifier>}\n      </memberExpression>\n    )\n  } else if (_.indexOf(props.callee, '.') > -1 && props.callee.split('.').length > 1) {\n    // if callee has dot notation.\n    callee = (\n      <memberExpression>\n        {_.map(props.callee.split('.'), (item) => <identifier>{item}</identifier>)}\n      </memberExpression>\n    )\n  }\n\n  return (\n    <callExpression>\n      {[\n        callee,\n        ...children\n      ]}\n    </callExpression>\n  )\n})\n\nexport const FnStatement = ({children}) => {\n  if (children.length === 1) {\n    const child = _.first(children)\n    // if FnCall passed.\n    if (n.ExpressionStatement.check(child)) {\n      return child.expression\n    }\n    return child\n  }\n\n  return (\n    <blockStatement>{children}</blockStatement>\n  )\n}\n\nexport const JSX = (props) => {\n  const {tagName, children, ...rest} = props\n\n  const attributes = _.reduce(rest, (result, value, key) => {\n    let jsxValue = <Value>{value}</Value>\n\n    // if object or false(bool)\n    if (_.isPlainObject(value) || value === false) {\n      jsxValue = <jsxExpressionContainer>{jsxValue}</jsxExpressionContainer>\n    }\n\n    // if key only props(eg: hidden)\n    if (value === true) {\n      jsxValue = null\n    }\n\n    return [...result, (\n      <jsxAttribute\n        name={<jsxIdentifier name={key} />}\n        value={jsxValue}\n      />\n    )]\n  }, [])\n\n  const jsxChildren = _.map(children, (child) => {\n    if (_.isString(child)) {\n      return <jsxText value={child} />\n    }\n    return child\n  })\n\n  return (\n    <jsxElement>\n      {[\n        <jsxOpeningElement selfClosing={false}>\n          {[\n            <jsxIdentifier name={tagName} />,\n            ...attributes\n          ]}\n        </jsxOpeningElement>,\n        <jsxClosingElement>\n          <jsxIdentifier name={tagName} />\n        </jsxClosingElement>,\n        ...jsxChildren\n      ]}\n    </jsxElement>\n  )\n}\n\nexport const Import = (props) => {\n  let specifiers = []\n\n  if (props.name) {\n    specifiers = [(\n      <importNamespaceSpecifier>\n        <identifier name={props.name} />\n      </importNamespaceSpecifier>\n    )]\n\n    if (props.default) {\n      specifiers = [(\n        <importDefaultSpecifier>\n          <identifier name={props.name} />\n        </importDefaultSpecifier>\n      )]\n    }\n  }\n\n  if (!_.isEmpty(props.children)) {\n    specifiers = props.children\n  }\n\n  return (\n    <importDeclaration importKind=\"value\">\n      {[\n        ...specifiers,\n        <literal value={props.source} />\n      ]}\n    </importDeclaration>\n  )\n}\n\nexport const Export = (props) => {\n  const {children} = props\n\n  if (props.default) {\n    return (\n      <exportDefaultDeclaration>\n        {children}\n      </exportDefaultDeclaration>\n    )\n  }\n\n  // otherwise treat as named export.\n  return (\n    <exportNamedDeclaration source={null}>\n      {children}\n    </exportNamedDeclaration>\n  )\n}\n\nexport const Fn = (props) => {\n  const nextProps = {\n    ...props,\n    // wrap id with identifier.\n    id: props.id ? <identifier>{props.id}</identifier> : null\n  }\n  return <functionExpression {...nextProps} />\n}\n\nexport const ClassDef = (props) => {\n  const {children} = props\n  const id = props.id ? <identifier>{props.id}</identifier> : null\n  return (\n    <classDeclaration id={id}>\n      <classBody>\n        {children}\n      </classBody>\n    </classDeclaration>\n  )\n}\n\nexport const Method = (props) => {\n  const {kind, children} = props\n  const key = props.key ? <identifier>{props.key}</identifier> : children.shift()\n  return (\n    <methodDefinition kind={kind} static={props.static}>\n      {key}\n      {children}\n    </methodDefinition>\n  )\n}\n\n// const\nexport const Const = VariableDeclarationCreator('const')\nexport const Let = VariableDeclarationCreator('let')\nexport const Var = VariableDeclarationCreator('var')\n\nexport const ArrowFn = (props) => <arrowFunctionExpression {...props} />\n\n\n\n// WEBPACK FOOTER //\n// lib/components/simple.js","/** @jsx h */\n\nimport h from 'lib/h'\n\n// withExpression hoc\nexport const withES = (BaseComponent) => ({es, ...rest}) => {\n  if (es) {\n    return (\n      <expressionStatement>\n        <BaseComponent {...rest} />\n      </expressionStatement>\n    )\n  }\n  return (\n    <BaseComponent {...rest} />\n  )\n}\n\n\n\n// WEBPACK FOOTER //\n// lib/components/hoc.js","import React from 'react'\nimport Plain from 'slate-plain-serializer'\nimport _ from 'lodash'\n\nimport {\n  compose,\n  withPropsOnChange,\n  withState,\n  withHandlers\n} from 'recompose'\n\nimport classes from './style'\nimport plugins from './plugins'\nimport createInitialState from './createInitialState'\n\n// Import the Slate editor.\nimport { Editor } from 'slate-react'\n\nconst enhance = compose(\n  withState('value', 'setValue', ({template = ''}) => createInitialState(template.split('\\n'))),\n  withPropsOnChange(\n    ['onChange'],\n    ({onChange}) => ({\n      onChange: _.debounce(onChange, 10)\n    })\n  ),\n  withPropsOnChange(\n    ['template'],\n    ({template, setValue}) => {\n      // update Value and parent htmlPart.\n      setValue(createInitialState(template.split('\\n')))\n    }\n  ),\n  withHandlers({\n    handleChange: (props) => ({value}) => {\n      const {onChange, setValue} = props\n      if (value.document !== props.value.document) {\n        // trigger onChange only if document changed.\n        onChange(Plain.serialize(value))\n      }\n      setValue(value)\n    }\n  })\n)\n\nexport default enhance((props) => {\n  const {\n    value,\n    handleChange,\n    error,\n    className\n  } = props\n\n  let editorWrapperClass = classes.EditorWrapper\n  if (className) {\n    editorWrapperClass += ` ${className}`\n  }\n\n  return (\n    <div className={editorWrapperClass}>\n      <Editor\n        className={classes.Editor}\n        placeholder='enter some code'\n        plugins={plugins}\n        value={value}\n        onChange={handleChange}\n      />\n\n      {error && (\n        <pre className={classes.Error}>\n          {error.toString()}\n        </pre>\n      )}\n    </div>\n  )\n})\n\n\n\n// WEBPACK FOOTER //\n// docs-src/components/common/Editor/index.js","import {\n  registerStyles\n} from 'docs-src/utils/style'\n\nconst LineNumber = {\n  content: 'counter(linenumber)',\n  color: 'rgba(27,31,35,0.3)',\n  display: 'block',\n  padding: '0 8px',\n  textAlign: 'right'\n}\n\nconst EditorWrapper = {\n  position: 'relative',\n  flex: '1 1 auto',\n  height: '100%',\n  width: '50%'\n}\n\nconst Editor = {\n  padding: '0 8px',\n  '-webkit-font-smoothing': 'auto',\n  border: `1px solid #cccccc`,\n  fontFamily: '\"SFMono-Regular\", Consolas, \"Liberation Mono\", Menlo, Courier, monospace;',\n  height: '100%',\n  overflow: 'scroll',\n\n  '& > pre': {\n    margin: '8px 0',\n\n    '& > code': {\n      '& > *': {\n        fontSize: 14,\n        lineHeight: '20px',\n        verticalAlign: 'top'\n      }\n    }\n  },\n\n  '& > pre.line-numbers': {\n    position: 'relative',\n    paddingLeft: 32,\n    counterReset: 'linenumber',\n\n    '& > code': {\n      position: 'relative',\n      whiteSpace: 'inherit'\n    }\n  },\n\n  '& .line': {\n    position: 'relative',\n  },\n\n  '& .line-numbers-rows': {\n    position: 'absolute',\n    top: 0,\n    left: -32,\n    width: 32, /* works for line-numbers below 1000 lines */\n    letterSpacing: '-1px',\n    borderRight: '1px solid transparent',\n    userSelect: 'none'\n  },\n\n  '& span.line-numbers-rows': {\n    display: 'block',\n    counterIncrement: 'linenumber'\n  },\n\n  '& span.line-numbers-rows:before': LineNumber,\n  '& span.line-numbers-rows.has-error:before': {\n    ...LineNumber,\n    color: 'red'\n  }\n}\n\nconst Error = {\n  margin: 0,\n  padding: 8,\n  position: 'absolute',\n  whiteSpace: 'pre-wrap',\n  left: 0,\n  bottom: 0,\n  right: 0,\n  background: '#EEEEEE',\n  color: 'red',\n  opacity: 0.8,\n  fontWeight: 'bold'\n}\n\nexport default registerStyles({\n  EditorWrapper,\n  Editor,\n  Error\n})\n\n\n\n// WEBPACK FOOTER //\n// docs-src/components/common/Editor/style.js","import Prism from 'slate-prism'\n\n// import jsx syntax\nimport 'prismjs/components/prism-jsx'\n\nimport EditCode from 'slate-edit-code'\nimport IMEFix from './IMEFix'\nimport Code from './Code'\n\nexport default [\n  IMEFix(),\n  Code(),\n  Prism({\n    onlyIn: (node) => node.type === 'code',\n    getSyntax: node => node.data.get('className').split('-')[1]\n  }),\n  EditCode({\n    containerType: 'code',\n    lineType: 'code_line',\n    exitBlockType: null\n  })\n]\n\n\n\n// WEBPACK FOOTER //\n// docs-src/components/common/Editor/plugins/index.js","// Workaround for text deleted on IME input.\n// Only tested for Japanese IME and Latest Chrome.\n// https://github.com/ianstormtaylor/slate/blob/master/src/components/content.js#L603\nexport default (options = {}) => {\n  let isIME = false\n  return {\n    onKeyDown(e, data, change, editor) {\n      const code = e.nativeEvent.code.toLowerCase()\n      if (data.code === 229 && code === 'enter') {\n        isIME = true\n        return change\n      }\n    },\n    onBeforeInput(e, data, change) {\n      if (isIME) {\n        const text = e.nativeEvent.data\n        e.preventDefault()\n        isIME = false\n        change.insertText(text)\n        return true\n      }\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// docs-src/components/common/Editor/plugins/IMEFix.js","import React from 'react'\n\nconst CodeLine = (props) => {\n  const {node} = props\n  const error = node.data.get('error')\n\n  let rowClass = 'line-numbers-rows'\n  if (error) {\n    rowClass += ' has-error'\n  }\n\n  return (\n    <div\n      className=\"line\"\n      data-key={node.key}\n    >\n      <span\n        className={rowClass}\n        contentEditable={false}\n        title={error}\n      />\n      {props.children}\n    </div>\n  )\n}\n\nexport default (options = {}) => {\n  return {\n    renderNode (props) {\n      const {node, attributes, children} = props\n      if (node.type === 'code') {\n        return <pre className=\"line-numbers\"><code {...attributes}>{children}</code></pre>\n      } else if (node.type === 'code_line') {\n        return <CodeLine {...props}>{children}</CodeLine>\n      }\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// docs-src/components/common/Editor/plugins/Code.js","/** @jsx h */\n\nimport { createHyperscript } from 'slate-hyperscript'\nimport _ from 'lodash'\n\nconst h = createHyperscript({\n  blocks: {\n    code: 'code',\n    code_line: 'code_line'\n  },\n  inlines: {},\n  marks: {}\n})\n\nmodule.exports = (children) => {\n  return (\n    <value>\n      <document>\n        <code className=\"language-jsx\" style={{color: 'red'}}>\n          {_.map(children, (child, i) => <code_line>{child}</code_line>)}\n        </code>\n      </document>\n    </value>\n  )\n}\n\n\n\n// WEBPACK FOOTER //\n// docs-src/components/common/Editor/createInitialState.js","import * as Babel from '@babel/standalone'\nimport _ from 'lodash'\n\nimport { h, print, format, simple } from 'js-to-builder'\n\n// expose h to window for eval\nwindow.h = h\n\n// transpile source code by babel.\nexport const babelAndEval = (builderCode) => {\n  const {\n    Const,\n    Let,\n    Var,\n    Value,\n    ArrowFn,\n    FnStatement,\n    FnCall,\n    Fn,\n    Declarator,\n    Import,\n    Export,\n    JSX,\n    ClassDef,\n    Method\n  } = simple\n\n  const code = _.get(Babel.transform(builderCode, {\n    'presets': [\n      'es2015',\n      'stage-2',\n      'react'\n    ]\n  }), 'code', '')\n\n  const builder = eval(`\n    (() => {\n      ${format(code)}\n      return render()\n    })()\n  `)\n\n  return print(builder)\n}\n\nexport default babelAndEval\n\n\n\n// WEBPACK FOOTER //\n// docs-src/utils/babel.js","import _ from 'lodash'\nimport { wrap as _wrap, FreeStyle } from 'react-free-style'\nimport prefixAll from 'inline-style-prefixer/static'\n\nconst Style = FreeStyle.create()\n\nexport const registerStyles = (styles) => {\n  return _.reduce(styles, (result, style, key) => {\n    // result[key] = Style.registerStyle(prefixAll(style))\n    result[key] = Style.registerStyle(style)\n    return result\n  }, {})\n}\n\nexport const registerRules = (styles) => {\n  return _.each(styles, (style, key) => {\n    Style.registerRule(key, prefixAll(style))\n  })\n}\n\nexport const wrap = (Component) => _wrap(Component, Style)\n\nexport default Style\n\n\n\n// WEBPACK FOOTER //\n// docs-src/utils/style.js"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;;;AACA;AACA;AADA;AACA;;;;;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;;;AAAA;AACA;;;AACA;AACA;AACA;AACA;AADA;AACA;;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChGA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;AADA;AACA;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AADA;AACA;AAAA;AACA;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AAEA;AACA;AACA;AAJA;AAMA;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;;;AAAA;AACA;;;AACA;AACA;AADA;AACA;AAGA;AACA;;;;;;;AAHA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;;;AAAA;AACA;;;AACA;AACA;;;AAEA;AACA;AAAA;AACA;AACA;AACA;;;;;AANA;AACA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClCA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;ACjBA;AACA;;;AAAA;AACA;;;AACA;AACA;AAMA;AACA;;;AACA;AACA;AACA;AACA;;;AAAA;AACA;;;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAZA;AAJA;AACA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAHA;AAcA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AAHA;AATA;AAnBA;AAoCA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AArCA;AA0CA;;;;;;;;;;;;;;;;;;;ACxHA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AATA;AACA;AAaA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AALA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AANA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;;;;;;;;ACxDA;AACA;;;AAAA;AACA;;;AACA;AACA;;;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;;;AAAA;AACA;;;;;;;AAJA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AAGA;AACA;AADA;AAGA;;;;;;;;;;;;AClDA;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;;;AAAA;AACA;;;AACA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;;;AACA;AACA;;;;;;;AANA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AAMA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAEA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjXA;AACA;AAAA;AACA;AADA;AACA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;;;AACA;AACA;AAGA;AACA;;;AAAA;AACA;AADA;AACA;;;;;;;AAVA;AACA;AAUA;AAAA;AAEA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AADA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AAhBA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AADA;AARA;AAeA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;ACtRA;AACA;;;;;AAHA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AAGA;AAXA;;;;;;;;;;;;;;;;;;;;ACLA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AACA;AACA;AAMA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AAEA;AACA;;;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AADA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AACA;AAnBA;AA8BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AACA;AADA;AAVA;AAgBA;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAHA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAEA;AAFA;AAnDA;AACA;AAwDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;AC1FA;AACA;;;AAEA;AACA;AACA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AANA;AAOA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;;;;;;;;;;;;;;;;;;;ACvBA;AACA;;;;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AATA;AAYA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AARA;AAUA;;;;;;;;;;;;;;;ACnCA;AACA;AAAA;AACA;;;;;AAJA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AACA;AAQA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AAQA;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AADA;AACA;AAAA;AACA;;;AACA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AADA;AACA;AAOA;AACA;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;;;AAAA;AACA;AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}